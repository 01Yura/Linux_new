У нас в компании разработчики всегда делают минимальные юнит-тесты, должность AQA отсутствует (атоматических тестов нет), но есть должность manual QA. Для тестирования новых фич билд деплоится на Test server, далее если все нормально, то он деплоится на Staging server, где опять manual QA проводят регрессионное тестирование

1. Разработка и локальные тесты
Создание ветки: Разработчик берет задачу и создает отдельную ветку для новой фичи или исправления бага, например, feature/new-feature.
Написание кода и юнит-тестов: Разработчик пишет код и проводит юнит-тесты локально на своей машине, чтобы убедиться, что базовая функциональность работает корректно.

2. Коммит и пуш в удаленный репозиторий
Коммит: После завершения работы над функцией, разработчик коммитит изменения в локальный репозиторий.
Пуш: Далее изменения пушатся в удаленный репозиторий в ветку feature/new-feature (Тут PR не требуется)

3. Создание Pull Request (PR) в ветку develop
Создание PR: Разработчик создает Pull Request (PR) для слияния своей ветки feature/new-feature с веткой develop. В этот момент CI/CD пайплайн начинает свою работу.

4. Сборка и деплой на Test Server
Сборка и деплой: CI/CD система автоматически запускает процесс сборки проекта и деплоит его на Test Server, так как настроена выполнять данное действие в случае обнаружения PR в ветку develope.

5. Тестирование на Test Server
Тестирование: На Test сервере manual QA сначала проводят smoke тестирование и затем тестирование новой функциональности.
Исправления: Если QA находят баги, он сообщает об этом разработчику, разработчик вносит правки в код в своей локальной ветке feature/new-feature, и процесс повторяется: изменения пушатся в удаленный репозиторий в ветку feature/new-feature без создания PR, далее пушатся в ветку develope снова создавая Pull Request, и код снова деплоится на Test Server.

5. Слияние с develop
Одобрение PR и слияние: После того как QA подтвердят, что новая функциональность работает корректно, PR одобряется и сливается в ветку develop. Разумеется PR одобряется не только разработчиком, но и тем кто проводит ревью данного PR. Слияние выполняется разработчиком, ответственным за PR, либо по согласованию с другими членами команды.

6. Деплой на Staging Server
Автоматический деплой на Staging: После слияния изменений в ветку develop, CI/CD система автоматически срабатывает и деплоит код на Staging Server.
Staging Server — это среда, максимально приближенная к продакшену, где проводится финальное тестирование.

7. Регрессионное тестирование на Staging Server
Тестирование: manual QA проводит регрессионное тестирование на Staging Server. Это ключевой этап, где проверяется, что все функциональности работают корректно и нет регрессий.
Исправления: Если на Staging сервере обнаружены проблемы, разработчик создает новую ветку для исправления (например, bugfix/staging-issue), и процесс повторяется: исправления тестируются на Test Server, сливаются в develop, и вновь деплоятся на Staging. --- ВНИМАНИЕ! Данный пункт может быть не верен, так как сказано что создается ветка bugfix/staging-issue, но почему не продолжить исправления в ветке feature/new-feature, это мне не понятно.

8. Слияние с main
Создание PR для слияния в main: После успешного регрессионного тестирования, разработчик создает Pull Request для слияния изменений из ветки develop в ветку main.
Одобрение и слияние: PR в main обычно одобряется и сливается после согласования с ответственными лицами (например, старшим разработчиком или руководителем команды), чтобы убедиться, что все готово для продакшена. В некоторых компаниях это может сделать старший разработчик или ответственный за релизы.

9. Деплой на продакшн
Ручной деплой: В заранее определенный день и время, после ручного подтверждения, CI/CD система запускает деплой на продакшн сервер. Этот шаг обычно включает финальное ручное подтверждение перед деплоем.
Мониторинг: После деплоя на продакшн, проводится мониторинг системы для оперативного обнаружения возможных проблем.