apt install mysql-server - усиановит сервер БД и клиент чтобы можно было подклбчится

mysql -u root -p - если пароль не вводили при создании базы, то не надо -p
вводим пароль

Для установки пароля:

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; - для рута 
CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password'; - если юзера для БД нет
ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY 'password'; - если юзер для БД есть
Именно юзер для БД, а не системный (кроме рута, он есть автоматически)

КАВЫЧКИ В КОНЦЕ ЭТО ВАЖНО - ;

                                Импортирование таблиц в PostgreSQL

1) Создать БД
2) Подключитесь к вашей базе данных PostgreSQL:
        psql -U ваш_пользователь -d ваша_база_данных -h ваш_хост -p ваш_порт
3) Импортируйте файл SQL:
        \i путь_к_вашему_файлу.sql

Или https://www.asozykin.ru/posts/demo_database_sql_foundation

                                Создание БД и таблицы в MySQL

CREATE DATABASE cars; - создаем БД
USE cars - переключаемся на нее
CREATE TABLE new (brand VARCHAR (10), model VARCHAR (10), year YEAR, price INT); - создаем таблицу
SHOW TABLES;

                    +----------------+
                    | Tables_in_cars |
                    +----------------+
                    | new            |
                    | used           |
                    +----------------+

DESCRIBE new; - показать таблицу со всм описанием колонок (в postgres \d new) 

        +-------+-------------+------+-----+---------+-------+
        | Field | Type        | Null | Key | Default | Extra |
        +-------+-------------+------+-----+---------+-------+
        | brand | varchar(10) | YES  |     | NULL    |       |
        | model | varchar(10) | YES  |     | NULL    |       |
        | year  | year        | YES  |     | NULL    |       |
        | price | int         | YES  |     | NULL    |       |
        +-------+-------------+------+-----+---------+-------+

DROP TABLE new - удалить таблицу
DROP DATABASE - удалить БД
exit

Чтобы заполнить можно создать текстовые файлы с перечислением данных через TAB.

mysql --local-infile=1 - заходим в mysql в режиме, чтобы можно было добавлять данные из текстового файла
USE cars;
SET GLOBAL local_infile=1;
LOAD DATA LOCAL INFILE "/root/cars_new.txt" INTO TABLE new;
LOAD DATA LOCAL INFILE "/root/cars_used.txt" INTO TABLE new;

DELETE FROM `new` WHERE `brand` = "Lada"; - удалить строку, если по ошибке внесли запись в таблицу

SELECT * FROM new;
SELECT * FROM used; - показывает таблицу

INSERT INTO new (brand, model, year) VALUES ("Daewoo", "Nexia", "2014"); - добавим строку вручную
INSERT INTO new (brand, model, year) VALUES ("Daewoo", "Matiz", 2015) - год можно писать и без кавычек, так как значение INT у него походу

DELETE FROM new WHERE model = "Matiz";

exit - выйти из командной строки mysql

mysql cars -u root - войти сразу в БД cars
SHOW TABLES; - смотрим какие есть таблицы
SELECT * FROM new; - смотрим содержимое таблиц

            +--------+--------+------+--------+
            | brand  | model  | year | price  |
            +--------+--------+------+--------+
            | Kia    | Cerato | 2014 | 780000 |
            | Kia    | Rio    | 2015 | 620000 |
            | Ford   | Focus  | 2016 | 820000 |
            | Daewoo | Nexia  | 2014 |   NULL |
            +--------+--------+------+--------+

SELECT * FROM used;
SELECT model FROM new;

                    +--------+
                    | model  |
                    +--------+
                    | Cerato |
                    | Rio    |
                    | Focus  |
                    | Nexia  |
                    +--------+

SELECT * FROM new WHERE brand = "Kia";

            +-------+--------+------+--------+
            | brand | model  | year | price  |
            +-------+--------+------+--------+
            | Kia   | Cerato | 2014 | 780000 |
            | Kia   | Rio    | 2015 | 620000 |
            +-------+--------+------+--------+

SELECT * FROM new WHERE brand = "Kia" AND year = 2015;

SELECT model  FROM new WHERE brand = "Kia" AND year = 2015;
                    
                    +-------+
                    | model |
                    +-------+
                    | Rio   |
                    +-------+

UPDATE new SET model="Kuga" WHERE model="Focus"; - редактируем выбранные значения

SELECT * FROM new JOIN used ON new.brand = used.brand; - обьединить таблицы по условиям
      
        +-------+--------+------+--------+-------+--------+------+--------+
        | brand | model  | year | price  | brand | model  | year | price  |
        +-------+--------+------+--------+-------+--------+------+--------+
        | Kia   | Cerato | 2014 | 780000 | Kia   | Cerato | 2012 | 480000 |
        | Kia   | Rio    | 2015 | 620000 | Kia   | Cerato | 2012 | 480000 |
        +-------+--------+------+--------+-------+--------+------+--------+

SELECT * FROM new ORDER BY brand; - отсортировать по бренду

sudo mysqldump -uroot -pпароль имя_базы > dump.sql - экспорт БД в файл 
sudo mysql --user=root --password=ваш_пароль имя_базы_данных < бэкап.sql - импортировать готовую БД

При установки Wordpress и создании БД
CREATE DATABASE wordpress;
CREATE USER 'wp_user'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'wp_user'@'%';
FLUSH PRIVILEGES;

Символ - % указывает что данный юзер может подключится с любого хоста, а не только с локалхоста
http://it-website.ru/wp-admin/



SELECT User, Host FROM mysql.user; - посмотерть всех юзеров
SHOW DATABASES; - посмотерть все БД
DROP USER 'user1'@'localhost'; - удалить юзера
DROP DATABASE database_name; - удалть БД

Сменить подключение для существующего пользователя root
UPDATE mysql.user SET Host='%' WHERE User='root' AND Host='localhost';
FLUSH PRIVILEGES;

ALTER USER 'root'@'%' IDENTIFIED BY 'new_password'; - сменить пароль для root

Часто можно подключится из сисемного пользователя root к mysql просто введя mysql, без пароля и тд. Это возможно если настроена аутентификация по сокетам, проверить можно командой:
SELECT user, host, plugin FROM mysql.user;

+------------------+-----------+-----------------------+
| user             | host      | plugin                |
+------------------+-----------+-----------------------+
| root             | %         | auth_socket           |
| debian-sys-maint | localhost | caching_sha2_password |
| mysql.infoschema | localhost | caching_sha2_password |
| mysql.session    | localhost | caching_sha2_password |
| mysql.sys        | localhost | caching_sha2_password |
+------------------+-----------+-----------------------+

Если для пользователя root настроена аутентификация по сокетам (plugin auth_socket), то для подключения под этим пользователем с использованием пароля аутентификация по паролю будет игнорироваться. Это означает, что вы не сможете подключиться к MySQL под пользователем root, используя логин и пароль, независимо от того, подключаетесь ли вы с удаленного хоста или с localhost.

Чтобы изменить метод аутентификации:
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'your_password';
FLUSH PRIVILEGES;

Настройка MySQL для приема удаленных подключений:

Откройте файл конфигурации MySQL (my.cnf или mysqld.cnf). Обычно он находится в одном из следующих мест:
    /etc/my.cnf
    /etc/mysql/my.cnf
    /etc/mysql/mysql.conf.d/mysqld.cnf
Найдите строку bind-address и измените её значение на 0.0.0.0, чтобы MySQL принимал подключения со всех IP-адресов:

bind-address = 0.0.0.0

service mysql restart - обязательно перезапутить

Надо изменить параметры пользователя, который будет подключаться (необязательно):
ALTER USER 'your_user'@'%' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON *.* TO 'your_user'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

На удаленом компе надо установить клиент для подключения:
apt install mysql-client
mysql -h remote_host_ip -u your_user -p - это команда для подключения

USE название_бд;
SHOW TABLES;

                                        DBeaver

CTRL + ] - открыть новый SQL-скрипт или F3

SQL (от англ. Structured Query Language, «язык структурированных запросов») — язык запросов, с помощью которого можно управлять данными в реляционной базе.

Запрос — это команда к базе данных, которая написана в синтаксисе SQL. В запросе пишут, например, какие данные выбрать, как именно их обработать или изменить.
Запрос в свою очередь формируется с помощью специальных слов или символов в синтаксисе SQL которые называются – оператор.

- SELECT
В запросе два ключевых слова: **SELECT** и **FROM** — буквально «выбрать из».
SELECT указывает, какие столбцы выбрать из таблицы базы данных.
FROM (англ. «из») указывает, из какой таблицы взять данные.

    SELECT column_1 FROM table_1;
    SELECT * FROM table_1; - показать всё из таблицы table_1
    SELECT name AS hero_name FROM superheroes; - показать все значения из колонки name, но в выводе назвать ее hero_name

- WHERE
Условие в SQL-запросе, которое покажет ограниченную выборку, прописывают командой WHERE (англ. «где»). Оператор проверяет, соответствует ли каждая строчка таблицы условию, и выбирает подходящие.
Синтаксис запроса строится так же, как и SELECT, но добавляется WHERE:

    SELECT column_1 FROM table_1 WHERE column_2 = 'value';
    select * from superheroes where gender = 'Female Characters' - ищет по значению в стодбце (операторы сравнения =, !=, <, > и тд)
    select name from superheroes where year between 2000 and 2005 - ищет в диапазоне
    select * from superheroes where eye in ('Brown Eyes', 'Green Eyes') - ищет в списке
    select * from superheroes where align = 'Bad Characters' order by appearances desc
    select * from superheroes where align = 'Bad Characters' and gender = 'Female Characters' order by appearances desc limit 5
    select * from superheroes where align = 'Bad Characters' and gender = 'Male Characters' order by year, appearances - отсортировать по году, а внутри каждого года по кол-ву появлений

Порядок операторов строго определён. Они должны идти так:
SELECT
FROM
WHERE

- DISTINCT
SQL оператор DISTINCT используется для удаления дубликатов из результирующего набора оператора SELECT.

    SELECT DISTINCT column_1 FROM table_1;
    select distinct(eye) from superheroes; - показать все уникальные значения из колонки eye
    select distinct hair from superheroes limit 10; - показать первый 10 значений

При выполнении подобного запроса в результате мы получим только уникальные значения, содержащиеся в поле column_1

- LIKE
Оператор LIKE (англ. «подобный») находит схожие значения в таблице. Искать можно не только целое слово, но и его часть.

    SELECT column_1, column_2 FROM table_1 WHERE column1 LIKE '%example____';
    select * from superheroes where hair like ('%Blond%') - like ищет соответствие шаблону
    select * from superheroes where hair like ('%Blond%') and align = ('Good Characters') - логические операции AND (есть еще OR и NOT)
    select * from superheroes where hair NOT IN ('Black Hair', 'Brown Hair') - NOT можно использовать с LIKE, IN, BETWEEN


Перед оператором LIKE указывают столбец, в котором нужно искать, а после LIKE — шаблон для поиска — паттерн.
Существует два подстановочных знака, которые используются в сочетании с оператором LIKE SQL:
% — знак процента представляет собой ноль, один или несколько символов;
_ — подчёркивание представляет собой один символ.

- INSERT, UPDATE, DELETE

- INSERT
INSERT помогает добавить новую строку в таблицу (англ. «вводить»). В запросе два ключевых оператора: INSERT INTO и VALUES.
INSERT INTO указывает, в какую таблицу добавить данные.
VALUES перечисляет данные, которые нужно добавить.

    INSERT INTO table_1 (column_1, column_2, column_3) VALUES (values_for_column_1, 'values_for_column_2', values_for_column_3)
    insert into superheroes  (name, appearances, universe) values ('Yura', 1985, 'Real World')

- UPDATE
Оператор UPDATE (англ. «обновить») меняет текущую информацию в таблице.

    UPDATE table_1 SET column_2 = 'values' WHERE column_1 = 'values2'
    update superheroes set name='Batman' where id=7282

В запросе три ключевых оператора: UPDATE, SET и WHERE.
UPDATE указывает, в какой таблице изменить данные.
SET указывает столбец, в котором необходимо поменять данные.
WHERE выбирает строки, опционально.

- DELETE
Оператор DELETE удаляет записи из таблицы (англ. «удалять»).

    DELETE FROM table_1 WHERE column_1 = 'values1'

В запросе два ключевых оператора: **DELETE FROM** и **WHERE**.
DELETE FROM указывает, из какой таблицы удалить записи.
WHERE выбирает строки, в которых нужно удалить данные.

- Агрегирующие функции
Если вам нужно определить количество строк для среза, объедините функцию COUNT() с конструкцией WHERE.
        SELECT COUNT(column_1) FROM table_1
        WHERE column_1 = 'values'

В зависимости от цели количество строк считают по-разному:
COUNT(*) возвращает общее количество строк в таблице;
COUNT(column) возвращает число строк в столбце column;
COUNT(DISTINCT column) (англ. distinct, «отдельный, особый») возвращает количество уникальных строк в столбце column.
        SELECT COUNT(column_1) FROM table_1

Кстати, данный оператор можно использовать и в обычной выборке после слова SELECT, что позволит получить нам только уникальные записи.
Функция SUM(column) возвращает сумму по столбцу column. Когда функция выполняется, пропуски игнорируются.
*!Обратите внимание:* функция SUM() работает только с числовым форматом данных.
AVG (column) возвращает среднее значение по столбцу column.
Минимальное и максимальное значения вычисляют функциями MIN() и MAX().
        SELECT min(column_1) FROM table_1

- Группировка и сортировка
Команду GROUP BY (англ. «группировать по») применяют, когда данные нужно разделить на группы по значениям полей.
        SELECT column_1, COUNT(column_2) FROM table_1
        GROUP BY column_1

Чтобы сортировать данные по указанным полям, применяют команду ORDER BY (англ. order by, «упорядочить по»). В отличие от GROUP BY, в блоке с командой ORDER BY нужно перечислить только поля, по которым вы хотите сортировать информацию.
У команды ORDER BY есть аргумент, регулирующий порядок сортировки в столбцах. Он может принимать такие значения:
ASC (от англ. ascending, «восходящий») сортирует данные в порядке возрастания. Это значение аргумента ORDER BY по умолчанию.
DESC (от англ. descending, «нисходящий») сортирует данные по убыванию.
Аргументы команды ORDER BY указывают сразу после поля, по которому сортировали данные:
        SELECT column_1, COUNT(column_2) AS sum FROM table_1
        GROUP BY column_1
        ORDER BY sum desc (asc);
        select * from superheroes order by year;
        select * from superheroes order by appearances desc; - сортировака по убыванию desc

- JOIN
Не всегда удобно идти в одну таблицу, смотреть первичные ключи, и искать их же во второй таблице. Удобнее получить понятный результат с помощью одного запроса. Чтобы это сделать, применяют соединение таблиц — используют оператор JOIN (англ. «соединять»).
Таблицы можно соединить через INNER (англ. «внутренний») и OUTER (англ. «внешний»):
- Соединение INNER возвращает строки строго на пересечении двух таблиц.
SELECT 
  table_1.column_1,
  table_1.column_2,
  table_2.column_1,
  table_2.column_2
FROM
  table_1
JOIN 
  table_2 ON
  table_1.column_1 = table_2.column_2

Различают три вида OUTER JOIN: LEFT, RIGHT и FULL
LEFT OUTER JOIN: возвращаются все строки левой таблицы. Если у строк левой таблицы выполняются условия соединения, они дополнятся данными правой таблицы. Если есть недостающие данные, вместо строк правой таблицы подставляются NULL-значения.

-- создаем таблицу супергероев
DROP TABLE IF EXISTS superheroes;
CREATE TABLE superheroes (
        id SERIAL PRIMARY KEY, -- назначаем его как праймари кей, чобы автоматизировать создание новой строки
        name VARCHAR(100),
        align VARCHAR(30),
        eye VARCHAR(30),
        hair VARCHAR(30),
        gender VARCHAR(30),
        appearance INT,
        year INT,
        universe VARCHAR(10) 
);

- ALTER значит изменить таблицу

ALTER TABLE superheroes ADD COLUMN alive BOOLEAN; -- добавить колонку
ALTER TABLE superheroes DROP COLUMN alive; -- удалить колонку
ALTER TABLE superheroes RENAME COLUMN name TO hero_name;
ALTER TABLE superheroes RENAME TO comic_characters;

