SSL (Secure Sockets Layer) сертификат используется для обеспечения безопасного соединения между веб-сайтом и браузером пользователя. Он содержит несколько важных элементов.

Содержимое SSL сертификата:
    Доменное имя: Указывает домен, для которого сертификат выдан (например, example.com).
    Данные владельца: Информация о владельце сертификата, включая организацию, департамент, город, штат и страну.
    Информация о центре сертификации (CA): Указывает, какой центр сертификации выдал сертификат.
    Серийный номер: Уникальный номер, присвоенный сертификату центром сертификации.
    Срок действия: Даты начала и окончания действия сертификата.
    Открытый ключ: Публичный ключ, который используется для шифрования данных.
    Алгоритмы подписи и хэша: Алгоритмы, использованные для создания цифровой подписи сертификата.
    Подпись центра сертификации: Цифровая подпись центра сертификации, подтверждающая подлинность сертификата.
    
Генерация SSL сертификата:

1) Создание запроса на сертификат (CSR):
Это первый шаг, включающий генерацию пары ключей (закрытого и открытого) и создания запроса на сертификат.
    - Генерация пары ключей: Создается закрытый ключ (private key) и открытый ключ (public key).
    - Создание CSR: Генерируется запрос на сертификат (CSR), который содержит открытый ключ в открытом виде и информацию о сайте и его владельце в открытом виде. Эта инфа хэшируется (создается хэш или дайджест) и шифруется (это называется подписанием) своим закрытым ключом - ее можно расшифровать открытым (этот называется цифровая подпись)

Дайджест: Результат хэширования данных, обеспечивающий их целостность.
Цифровая подпись: Зашифрованный дайджест, подтверждающий аутентичность и целостность данных, созданный с использованием закрытого ключа и проверяемый с использованием открытого ключа.

    Подпись CSR закрытым ключом (что это):

Когда CSR подписывается закрытым ключом, это означает следующее:
    - Аутентификация: Подпись закрытым ключом подтверждает, что запрос исходит от владельца закрытого ключа. Поскольку закрытый ключ известен только владельцу, любая информация, подписанная этим ключом, может быть проверена с использованием соответствующего открытого ключа.
    - Целостность: Подпись обеспечивает целостность данных в CSR. Если кто-то попытается изменить содержимое CSR после его подписания, подпись больше не будет действительна при проверке с использованием открытого ключа. Это гарантирует, что данные в CSR не были изменены.

CSR (Certificate Signing Request) — это запрос на подпись сертификата, который отправляется в центр сертификации (CA) для получения SSL сертификата. CSR содержит информацию, необходимую для создания SSL сертификата, и создается на сервере, где будет установлен сертификат.
Содержимое CSR:

    1. Информация о субъекте: Содержит данные о владельце сертификата:
        Common Name (CN): Доменное имя, для которого будет выдан сертификат (например, example.com).
        Организация (O): Название организации, владеющей доменом.
        Организационный отдел (OU): Отдел внутри организации (необязательно).
        Город (L): Город, где расположена организация.
        Штат или область (ST): Штат или область.
        Страна (C): Код страны в формате двух букв (например, US для США).
    2. Открытый ключ: Публичный ключ, который будет использован для шифрования данных.
    3. Алгоритм подписи: Алгоритм, использованный для создания цифровой подписи CSR (например, SHA-256) и хэша для создания дайджеста (хэш 1+2)
    4. Цифровая подпись, которая представляет собой дайджест (хэш) 1+2, зашифрованный закрытым ключем сервера

    Формат CSR

CSR создается в формате, который включает в себя не только основные данные, но и метаданные. Стандартным форматом для CSR является формат PKCS#10. Вот как он структурирован:

    Version: Версия CSR.
    Subject: Информация о субъекте.
    Public Key: Открытый ключ.
    Attributes: Дополнительные атрибуты, которые могут включать информацию о хэш-алгоритме и алгоритме подписи.
    Signature Algorithm: Алгоритм, используемый для создания цифровой подписи.
    Signature: Цифровая подпись, которая является зашифрованным хэшом информации о субъекте и открытого ключа.

Пример команды для создания CSR с использованием OpenSSL:
    openssl req -new -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr

Команда делает следующее:

    req -new: Указывает на создание нового CSR.
    newkey rsa:2048: Указывает на генерацию новой пары ключей RSA длиной 2048 бит (закрытый сохраняется в файл, указанный далее, а открытый не сохраняется в файл, а открытый ключ включается в CSR и передается центру сертификации (CA))
    nodes: Указывает на создание закрытого ключа без парольной фразы.
    keyout example.com.key: Указывает файл для сохранения закрытого ключа.
    out example.com.csr: Указывает файл для сохранения CSR.

Таким образом на сервере, после выполнения этой команды создаются 2 файла: 
- закрытый ключ
- CSR файл 
! открытый ключ отдельно в файл не сохраняется, так как включается в CSR. Для стандартного использования SSL/TLS, включая создание сертификатов и их установку на веб-сервере, открытый ключ обычно не требуется хранить отдельно, поскольку он включается в сертификат, который вы по итогу получаете от центра сертификации (CA).

Если по каким то причинам открытый ключ все же нужен, то:
Извлечение и сохранение открытого ключа:
    openssl rsa -in example.com.key -pubout -out example.com.pub

Пример содержания CSR:

-----BEGIN CERTIFICATE REQUEST-----
MIICzjCCAbYCAQAwgYgxCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1TYW4gRnJhbmNp
...
4E+f8QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAJiN7gPoGR9xjzY/+
-----END CERTIFICATE REQUEST-----


Этот текстовый блок содержит закодированную в BASE64 информацию о субъекте, алгоритм подписи, открытый ключ и цифровую подпись. Полный вывод файла с расшифровкой в конце статьи.

2) Отправка CSR в центр сертификации (CA):
CSR отправляется в CA, который проверяет предоставленную информацию. После проверки CA подписывает CSR своим закрытым ключом, создавая SSL сертификат.

Подписанный CSR содержит:

    Информация о субъекте (в открытом виде).
    Открытый ключ (в открытом виде).
    Цифровая подпись (в зашифрованном виде).

Когда CA получает подписанный CSR, она выполняет следующие шаги:

    Извлекает информацию о субъекте из CSR (она в открытом виде)
    Извлекает открытый ключ из CSR (он в открытом виде)
    Извлекает цифровую подпись из CSR (это хэш инфы о субьекте + открытый ключ зашифрованные закрытым ключем)
    Вычисляет дайджест (хэш) содержимого CSR (информации о субъекте и открытого ключа, которые представлены в открытом виде) с использованием того же хэш-алгоритма, который использовался при создании CSR.
    Дешифрует цифровую подпись с использованием открытого ключа, чтобы получить оригинальный дайджест (хэш), созданный отправителем CSR.
    Сравнивает два дайджеста: Если они совпадают, это подтверждает, что информация в CSR не была изменена и что она действительно подписана владельцем закрытого ключа.

Этот процесс гарантирует, что данные в CSR не были изменены и что они действительно исходят от владельца закрытого ключа.

3) Выдача SSL сертификата:
CA выдает подписанный SSL сертификат, который затем устанавливается на веб-сервере.

4) Установка SSL сертификата на веб-сервер:
Установка сертификата и ключа: SSL сертификат и закрытый ключ, сгенерированный на первом этапе, устанавливаются на веб-сервере. Обычно это файлы с расширениями .crt и .key.
    Настройка веб-сервера: Конфигурационные файлы веб-сервера (например, Apache или Nginx) настраиваются для использования SSL сертификата.

Пример конфигурации для Apache:

<VirtualHost *:443>
    ServerName example.com
    SSLEngine on
    SSLCertificateFile /path/to/example.com.crt
    SSLCertificateKeyFile /path/to/example.com.key
    SSLCertificateChainFile /path/to/intermediate.crt
</VirtualHost>

После этого веб-сайт сможет устанавливать безопасные соединения с клиентами, используя HTTPS.    

                        Полный вывод CSR

Давайте рассмотрим полный вывод CSR (Certificate Signing Request) и его содержимое, включая открытый ключ, алгоритм шифрования и информацию о субъекте в открытом виде. Я предоставлю пример CSR с подробными аннотациями.

Команда для создания CSR:
    openssl req -new -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr -subj "/C=US/ST=California/L=San Francisco/O=Example Inc./OU=IT Department/CN=www.example.com"

Пример полного вывода CSR файла (PEM формат) (тут все закодировано в BASE64)

-----BEGIN CERTIFICATE REQUEST-----
MIICzjCCAbYCAQAwgYgxCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1DYWxpZm9ybmlh
MRMwEQYDVQQHDApTYW4gRnJhbmNpc2NvMRYwFAYDVQQKDA1FeGFtcGxlIEluYy4x
EzARBgNVBAsMCklUIERlcGFydG1lbnQxGDAWBgNVBAMMD3d3dy5leGFtcGxlLmNv
bTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN8Pm0Z9F7qFn5eEJdJx
sOZ2sH/pNrUowKRAEE6HxTtOS/O8s2Qhz0r1v4HlbOlJCU5vR0Q4VJb2+a5X7pE6
T5Bd7DLbq1/9MrLBBN8XvZANR2rsuWX1PS6POVn3cUy2Zp8hA1n2wPfN+nnnYJxg
1R/Fn+HRJvcd6BXsT6uFbwQdYIuIYZBodC/s5Ub2g7i2HQMA6OQ59SToTQoVx4yX
wM7zzobn07+qWbUjsdJ+nn48AKQJrjV4N1oy0lXc4S1rGhoCI0E0E+vO7VpTSKhI
UK5iSthE/L+Gd8TOrsd2bzTzOZWnuJgYfi58zp58yjcEXePdfr1K1KiStG6wr+jN
+PECAwEAAaAAMA0GCSqGSIb3DQEBCwUAA4IBAQAEZKrd1NeJChMDbcUVzlxxtfYj
+xWfaO5eRx8nFoh6isSy4E3+gYpofYYQ2NzA6PThP0SZm1LUlO8PQGL5UHgK+zvU
jTyQ3jbLZV5DlaO8z+U9MjRB4f5EPQ1l4/s4nHxllZyBve+ZvsfbrHChxRG2F4D9
dU/qBkhLEGH4CsmZJdxnxYoObNzg2vGjaIGzTtylJHl7E29ZkZhgPfZoTA4HcvN0
T4wIb9Gih0D9ZJfAwIBBQAo1V+JpCtMcd7hVDZG9l7PoF4ptHzFp1l0mfcnWQwNn
x+YQb5DwNQXBrgFD1rxW9X2MTydGxf3DYPqz4G/J9LDXJ9OtdV7PWhjZQnAcZ6Lb
-----END CERTIFICATE REQUEST-----

Разбор содержимого CSR
Заголовки
    -----BEGIN CERTIFICATE REQUEST-----
    ...
    -----END CERTIFICATE REQUEST-----
Эти строки обозначают начало и конец CSR файла.

Информация о субъекте (Subject Information)
    MIICzjCCAbYCAQAwgYgxCzAJBgNVBAYTAlVTMRYwFAYDVQQIDA1DYWxpZm9ybmlh
    MRMwEQYDVQQHDApTYW4gRnJhbmNpc2NvMRYwFAYDVQQKDA1FeGFtcGxlIEluYy4x
    EzARBgNVBAsMCklUIERlcGFydG1lbnQxGDAWBgNVBAMMD3d3dy5leGFtcGxlLmNv
    bQ==
Этот блок закодирован в Base64 и включает информацию о субъекте:
    C: Country (Страна) — US (Соединенные Штаты)
    ST: State (Штат) — California
    L: Locality (Город) — San Francisco
    O: Organization (Организация) — Example Inc.
    OU: Organizational Unit (Подразделение) — IT Department
    CN: Common Name (Доменное имя) — www.example.com

Открытый ключ (Public Key)
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0HVQxKL7R6oO6Jq/N+DE
    ...
    xUwaQKBgQDPmPoIcRzmI0i/g==
Этот блок также закодирован в Base64 и представляет открытый ключ.

Алгоритм подписи (Signature Algorithm)
    DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBA
Этот блок указывает алгоритм, используемый для создания цифровой подписи. В данном случае используется sha256WithRSAEncryption.

Цифровая подпись (Digital Signature)
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0HVQxKL7R6oO6Jq/N+DE
    ...
    5QnAcZ6Lb
Это закодированный в Base64 блок, представляющий цифровую подпись, созданную с использованием закрытого ключа.

Как это интерпретировать

    Информация о субъекте (Base64 закодированный):
        Содержит данные о владельце сертификата, такие как страна, штат, город, организация, подразделение и доменное имя.

    Открытый ключ (Base64 закодированный):
        Публичный ключ, который будет использоваться для шифрования данных и проверки цифровой подписи.

    Алгоритм подписи:
        Указывает, какой алгоритм использовался для создания цифровой подписи (в данном примере sha256WithRSAEncryption).

    Цифровая подпись (Base64 закодированный):
        Зашифрованный хэш информации о субъекте и открытого ключа, созданный с использованием закрытого ключа.

Вы можете использовать команду OpenSSL для отображения содержимого CSR в удобочитаемом виде:
    openssl req -in example.com.csr -noout -text
Вывод этой команды покажет информацию о субъекте, открытый ключ и алгоритм подписи в более понятном формате.



                    Генерация самоподписанных сертификатов

Для генерации самоподписанного сертификата можно использовать утилиту OpenSSL. Самоподписанный сертификат используется для тестирования и в тех случаях, когда не требуется проверка подлинности сертификата центром сертификации (CA). Ниже приведены шаги для создания самоподписанного сертификата:

Шаг 1: Генерация приватного ключа
Сначала нужно создать приватный ключ. В этом примере создадим ключ длиной 2048 бит.
    openssl genpkey -algorithm RSA -out website.com.key -pkeyopt rsa_keygen_bits:2048

Шаг 2: Создание CSR (запроса на сертификат)
Создаем CSR с информацией о субъекте, такой как страна, штат, город, организация и т.д.
    openssl req -new -key website.com.key -out website.com.csr -subj "/C=US/ST=California/L=San Francisco/O=Example Inc./OU=IT Department/CN=www.example.com"

Шаг 3: Генерация самоподписанного сертификата
Теперь создадим самоподписанный сертификат с использованием приватного ключа и CSR. Укажем срок действия сертификата (например, 365 дней).
    openssl x509 -req -days 365 -in website.com.csr -signkey website.com.key -out website.com.crt

Для того чтобы сайт мог работать с этими сертификатами, их нужно добавить в конфиг виртуального хоста
Для апачи нужно добавить строчки:
    SSLEngine on
    SSLCertificateFile /etc/certificates/website.com.crt
    SSLCertificateKeyFile /etc/certificates/website.com.key

Для Nginx:
    ssl_certificate /etc/nginx/ssl/website.com.crt;
    ssl_certificate_key /etc/nginx/ssl/website.com.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

Не забыть изменить сверху в файле конфига вирт хоста порт на 443
a2enmod ssl - для апачи