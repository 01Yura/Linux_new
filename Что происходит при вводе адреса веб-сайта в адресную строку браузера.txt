При начале ввода, то есть при вводе первой буквы названия сайта в адресной строке, браузер предложит варианты автоподстановки (используются те сайты на которые тв заходил)
Далее браузер определяет - это поисковый запрос или URL и начинается магия
В качестве протокола браузер поддерживает http, https, file (чтоюы открыть файл с локального компа), ftp 

Если в строке не указать протокол, то по умолчания браузер будет использовать HTTPS. Если сайт не поддерживает HTTPS, то произойдет падение до HTTP. Многие сайты используют перевдресацию на HTTPS, чтоюы гарантироваанно работать через HTTPS (это указывается в конфиге веб-сайта на сервере)
Так же браузеры могут использовать HSTS, если браузер ранее подключался к сайту по HTTPS, то он не будет использовать HTTP.

кеш браузера - hosts - кеш операционки - dns
Чтобы отправить запрос на DNS сервер прописанный в настройках сетевого адаптера, надо сначала узнать его mac-address. Это делается с помощью arp протокола.  

Установление TLS соединения (HTTPS)
1. Клиент запрашивает публичный ключ у сервера, отсылая hello сообщение 
2. Сервер отправляет клиенту свой публичный ключ (это называется - сертификат, подписанный ЦС)
Чтобы ЦС выдал такой сертификат серверу, сервер должен заранее предоставить ЦС необходимые данные владельца сервера (имя, паспорт, доказательства что сервер именно его), и после этого ЦС выдаст серверу сертификат (т.е. ЦС прикрепляет к публичному ключу сервера данные, что это именно этот сайт и шифрует эти данные своим приватным ключом - это называется сертификат подписанный ЦС)
3. Клиенту нужно убедиться что этот сертификат, полученный от сервера, принадлежит именно этому серверу, поэтому он расшифровывает этот Сертификат с помощью публичного ключа от ЦС, который встроен в браузер. Он встраивается на этапе установки браузера и хранится там всегда.
Это немножко странно, что корневой ЦС шифрует сообщение своим приватным ключом и его можно расшифровать с помощью публичного ключа - обычно наоборот, но именно так работает электронная подпись (если мы можем расшифровать сообщение публичным ключом корневого ЦС, то мы точно знаем что оно было подписано с помощью его привтного ключа.)
- Созыкин в этом видео https://youtu.be/6wCwjIhGylY говорит, что при установке ОС в спец хранилище устанавливаются публичные ключи корневого ЦС, и клиент при проверке сертификата, полученного от сервера (сайта) идёт по цепочке доверия и проверяет сначала публичный ключ ЦС, а затем публичный ключ корневого ЦС, который выдал сертификат этому ЦС.
Если пришедший от сайта публичный ключ (сертификат) не подписан, то в браузере вылезает сообщение «Вы уверены что хотите принять этот публичный ключ?»
А может быть, что сертификат подписан (например самоподписанный), но браузер не знает кем. Тогда тоже выходит сообщение. Самоподписанные сертификаты - это такие же сертификаты, они безопасные и могут использоваться внутри корпоративной структуры для шифрования трафика, так как в ней мы априори доверяем друг другу.
4. Теперь клиент уверен, что он общается именно с сайтом с которым хотел общаться. Клиент шифрует симметричный (сессионный) ключ публичным ключом сервера и отправляет на сервер
5. Сервер расшифровывает это сообщение с помощью своего приватного ключа. Таким образом получая сессионный ключ.
6. Теперь сервер и клиент могут шифровать сообщения друг другу этим симметричным сессионным ключом. Это требует меньших мощностей, чем если бы они использовали публичные (ассиметричные) ключи друг друга. 

В основном браузеры не имеют собственного хранилища сертификатов и доверяют хранилищу Windows, однако Firefox имеет свое хранилище, независимое от системного. 

Публичный и приватный ключ - это ассиметричное шифрование.  Так как ключи разные. 


- Когда браузер получил HTML код, он (движек рендеринга) начинает парсить его (HTML код), создавая так называемые узлы для каждого элемента, а эти узлы организуются в DOM-дерево (document object model - иерархическая структура, которая описывает содержимое HTML документа)
- Далее браузер парсит CSS и создает CSSOM-дерево, отражающее все стили страницы
- Далее идет слияние DOM и CSSOM, создается типо макет страницы
- Одновременно (?) отрабатывает javascript движек браузера и вносит правки в макет
- Браузер отрисовывает страницу основываясь на макете

Вышеописанный парсинг делается в несколько проходов, а не просто сверху-вниз или снизу-вверх, то есть парсинг там довольно сложный

      Электронная подпись (как ЦС подписывает серт сервера)

При использовании электронной подписи мы не шифруем содержимое документа. Вместо этого мы создаем цифровую подпись, которая добавляется к документу и служит для проверки его подлинности и целостности. Вот как это работает:

### Процесс создания электронной подписи:

1. **Хэширование**: Сначала вычисляется хэш (дайджест) документа с использованием криптографической хэш-функции (например, SHA-256). Хэш-функция преобразует документ в фиксированной длины строку (хэш-значение), которая уникальна для каждого уникального документа.

2. **Шифрование хэша**: Затем этот хэш шифруется с использованием приватного ключа отправителя. Это зашифрованное хэш-значение и есть цифровая подпись.

3. **Присоединение подписи**: Цифровая подпись присоединяется к документу. Документ вместе с цифровой подписью отправляется получателю.

### Процесс проверки электронной подписи:

1. **Расшифрование хэша**: Получатель использует публичный ключ отправителя, чтобы расшифровать цифровую подпись, получив тем самым оригинальное хэш-значение, которое было зашифровано отправителем.

2. **Хэширование документа**: Получатель вычисляет хэш-значение полученного документа с использованием той же хэш-функции, что и отправитель.

3. **Сравнение хэшей**: Если вычисленный хэш совпадает с расшифрованным хэш-значением, это подтверждает, что документ не был изменен и действительно был подписан отправителем.

### Резюме:
- **Электронная подпись**: Она не шифрует весь документ, а только хэш-значение документа с использованием приватного ключа. Подпись служит для проверки подлинности и целостности документа.
- **Цель**: Подтвердить, что документ был создан (или подписан) определенным лицом (обладателем приватного ключа) и что его содержимое не изменялось с момента подписания.

Таким образом, цифровая подпись гарантирует, что документ является подлинным и не был изменен, но сам документ не шифруется в процессе подписания.
