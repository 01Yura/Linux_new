https://www.jenkins.io/doc/book/installing/linux/ - документация

- сначала устанавливаем java (поддерживамые версии см в документации) (можно headless - это без пакетов gui)
- затем выполняем команды установки самого jenkins из документации
Jenkins автоматически запускается на порту :8080

Далее после подключения к порту 8080 нужно ввести парль админа из файла 
    cat /var/lib/jenkins/secrets/initialAdminPassword

- установить плагины

http://192.168.0.248:8080/restart - чтобы перезапустить сервер из GUI

Чтобы установить предыдущую версию плагина, надо с офиц сайта скачать файл.hpi
Плагин ChuckNorris для прикола

Не забывать включать Discard old builds и выставлять какое количнсво билдов оставлять

Тест для моего веб-сайта:
    result=`grep "IP checker" index.html | wc -l`
    echo $result
    if [ "$result" = "2" ]
    then
        echo "Test Passed"
        exit 0
    else
        echo "Test Failed"
        exit 1
    fi

Чтобы деплоить на удаленный сервер надо установить плагин Publish over SSH
Далее надо добавить удаленный сервер в jenkins
Manage Jenkins - System - Publish over SSH
Вставляем приватный ключ, добавляем сервера, тестируем 
(разумеется надо заранее на сервере с jenkins сгенерировать ssh ключи командой:
    ssh-keygen 
и затем скопировать на удаленный сервер публичный ключ командой:
    ssh-copy-id root@192.168.0.253
и разок подключиться для теста)
Заходим в Job и выбираем в Post-build Actions свой сервер, что копировать (*) и куда (можно оставить пустой если до этого указали сединственную доступную директорию на сервере)

Для управления Слейвами нужно установить 2 плагина:
- ssh agent
- ssh slaves

На самих слейвах надо установить Java:
    sudo apt install openjdk-11-jre-headless

Чтобы добавить slave:
Manage jenkins - Nodes - New node
Важно указать label, можно указать как общий так и уникальный для ноды 
Нужно создать директорию где будет выполняться все эти jobs

    Jenkins CLI

Нужно скачать клиент (.jar файл)
    wget http://192.168.0.248:8080/jnlpJars/jenkins-cli.jar - это скачать прямо на локальный сервер, но можно скачать и на windows
    java -jar jenkins-cli.jar -auth root:toor -s http://localhost:8080 version - подключится по паролю и выполнить команду version  
Лучше сделать отдельного юзера для CLI
И сделать ему токен
    java -jar jenkins-cli.jar -auth user_cli:11615d0b07b4d83e5823580be2b9466cb0 -s http://localhost:8080 version - это по токену
Можно не вводить имя и токен, есл присвоить их значения переменным среды:
    export JENKINS_USER_ID=user_cli
    export JENKINS_API_TOKEN=11615d0b07b4d83e5823580be2b9466cb0
Теперь можно просто писать:
    java -jar jenkins-cli.jar -s http://localhost:8080 version

В Windows можно сделать так:
    $env:JENKINS_USER_ID="user_cli"
    $env:JENKINS_API_TOKEN="11615d0b07b4d83e5823580be2b9466cb0"
Но надо установить java на windows
Добавить переменную JAVA_HOME со значением C:\Program Files\Java\jdk-21
Добавить Java в PATH, нажав изменить и добавив путь к файлу bin C:\Program Files\Java\jdk-21\bin
Теперь можно проверить командой java --version
Get-ChildItem Env: - так можно посмотреть переемнные среды в PowerShell
java -jar .\jenkins-cli.jar -s http://192.168.0.248:8080 version - теперь можно выполнить команду

Сохранить джоб:
java -jar jenkins-cli.jar -s http://192.168.0.248:8080 get-job MyFirstJob > myjob.xml
Импортировать джоб:
java -jar jenkins-cli.jar -s http://192.168.0.248:8080 create-job MyJobFromCLI < myjob.xml - так сработает ТОЛЬКО В LINUX
get-content myjob.xml | java -jar jenkins-cli.jar -s http://192.168.0.248:8080 create-job MyJobFromCLI - вот так в windows используя пайп 

Для подключения гитхаба надо плагины и не забыть добавить публичный ssh key в гитхаб и приватный в свои Credential на Jenkins
Чтобы подключаться по SSH ключу к репозиторию на github необходимо в настройках Security изменить параметр SSH Server Host Key Verification Strategy на Non verifying Verification Strategy или другую , в противном случае будет сыпаться ошибка при попытке добавить ключ: Manage Jenkins ---> Security ---> Git Host Key Verification Configuration ---> No verification

Build triggers:
1. Trigger builds remotely (e.g., from scripts)
Вписываем рандомный токен и при заходе на этот ip будет запускаться билд
    http://192.168.0.248:8080//job/Build_trigger1_to_PROD/build?token=tettetetee45e4trdryeerergrdger65465465gy
или
curl http://root:11cf68a96acb21a74098cd2d4fea482fd1@192.168.0.248:8080//job/Build_trigger1_to_PROD/build?token=tettetetee45e4trdryeerergrdger65465465gy - важно прописать имя пользователя и токен (созданный заранее во вкладке user_name - settings - api tokens)

2. Build after other projects are built
Билд запускается автоматически после того как выполнится какой то другой выбранный билд (надо вписать какой именно)

3. Build periodically
Вставляем расписание как в cron

4. Poll SCM 
Надо ввести расписание, например * * * * * (каждую минуту). Таким образо Jenkins каждую минуту будет ходить в Git и если есть новый коммит, то будет делать билд.

5. GitHub hook trigger for GITScm polling
Гитхаб сам будет запускать джоб на дженкинсе после коммита.
Надо устанть плагин Github 
- постаить галку Github URL и указать адрес проекта
- ниже еще раз вводите тот же адрес, тем самым указываете откуда брать source code и вводите credentials
- в самом гитхабе настриваем webhook (проект - settings - webhooks)
    payload URL: http://192.168.0.248:8080/github-webhook/ - адрес дженкинс сервера и /github-webhook/ в конце
    content type: application/json

Если не белого ip, то устанавливаем на сервак wireguard 
    sudo apt update
    sudo apt install wireguard -y
Создаем конфиг
    sudo nano /etc/wireguard/wg0.conf

Public key: ankvb7CSPFmHFN2zPs88yAQU/JGzbciclu4B51O/0z8= (ставить на сервере в своем пире)

[Interface]
PrivateKey = ????????? это приват для паблика который выше, взять из настроек с винды
Address = 192.168.3.9/32
DNS = 8.8.8.8

[Peer]
PublicKey = qpgCDbQiAO8lDlRqz3CrtwwiLdt1hRHz9/Z0gVYFriQ= (публичный ключ взятый с сервера)
AllowedIPs = 0.0.0.0/1, 128.0.0.0/1
Endpoint = ????????????:13231
PersistentKeepalive = 25

sudo wg-quick up wg0 - включить
sudo wg-quick down wg0
sudo systemctl enable wg-quick@wg0 - вкл в автозангрузку
sudo wg show - чекнуть соединение








            Pipeline

Чтобы писать пайплайны надо сначала установить плагин Pipeline
Он установит кучу всего
Удобнее писать пайплайн на Declarative Pipeline DSL (Domain-Specific Language):
pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Starting Build stage'
                echo 'Building...'
                sh "ls -la" // выполняем одну команду
                echo 'Build stage completed'
            }
        }

        stage('Test') {
            steps {
                echo 'Starting Test stage'
                echo 'Testing...'
                // выполняем несколько команд
                sh '''
                ls -la
                pwd
                whoami
                '''
                echo 'Test stage completed'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Starting Deploy stage'
                echo 'Deploying...'
                echo 'Deploy stage completed'
            }
        }
    }
}


Собственно дайный пайплайн и называется Jenkinsfile

Для красивого отображения стейджей нужно установить плагин Pipeline Stage View
Bash команды запускаются так: sh "cat file.txt"

Для запуска скрипта в докере, а не на хосте надо установить докер на хост и установть плагин Docker pipeline
sudo usermod -aG docker jenkins - и добавить пользователя jenkins в группу docker

https://youtu.be/68pKqpDO2Zw?si=-hy7M6WV0o4jkE5x

pipeline {
    agent {
        docker {
            image 'python:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Build') {
            steps {
                echo 'Starting Build stage'
                echo 'Building...'
                sh "ls -la" // выполняем одну команду
                echo 'Build stage completed'
            }
        }

        stage('Test') {
            steps {
                echo 'Starting Test stage'
                echo 'Testing...'
                // выполняем несколько команд
                sh '''
                ls -la
                pwd
                '''
                echo 'Test stage completed'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Starting Deploy stage'
                echo 'Deploying...'
                echo 'Deploy stage completed'
                sh "python --version"
            }
        }
    }
}

В данном Jenkinsfile команды  выполняются внутри Docker контейнера, так как вся конфигурация задания (pipeline) указана с использованием Docker агента. Контейнер используется для выполнения всех шагов (steps) внутри этапов (stages).

Можно брать Jenlinsfile с гитхаба, но важно чтобы он был назван с большой буквы

Обычно Jenkinsfile лежит прямо в репе с кодом и скачивается всегда весь репозиторий. А уже Jenkinsfile описывает что надо делать с кодом


Структура пайплайна:

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                //
            }
        }
        stage('Test') {
            steps {
                //
            }
        }
        stage('Deploy') {
            steps {
                //
            }
        }
    }
}

Прежде чем запушить образ в докерхаб надо создать репу там и сделать credentials в настройках профиля докерхаб
Сделать токен для доступа и создать новые credentials в jenkins со значением логин и пароль
Надо установить плагин Docker Pipeline

        Установка Git Parametres

Надо установть одноименный плагин


