Устанавливаем github для windows
Создаем папку в которой будем хранить проэкты
Заходим в нее и вводим команды
git config --global user.name "ИМЯ НА ГИТХАБЕ"
git config --global user.email "ПОЧТА С ГИТХАБА"
git init
В Studio Visual Code открываем новое окно, нажимаем "Клонировать с гитхаба", вводим адрес проекта (можно посмотреть на гитхабе в самом проекте во вкладке - code)
Вставляем , соглашаемся со всеми окнами


Можно без всего этого
Просто копируем проект с гитхаба в нужную папку (git clone)
Вносим изменения 
Сохраняем (ЭТО ВАЖНО, иначе не закоммитить и не отправить)
Делаем коммит и пуш

В VS Сode скачать расширение git graph, чтобы удобно смотреть и возвращаться на нужный коммит

НА LINUX

Прежде чем запушить что-либо на свой гитхаб надо создать там репозиторий. Просто запушить вникуда не получится.

yum install git
git --version
git --help
git config --global user.name "ИМЯ НА ГИТХАБЕ"
git config --global user.email "ПОЧТА С ГИТХАБА"
Имя и почту можно вносить любую

git config -l - посмотерть 

Создаем папку для проекта и переходим в нее
git init - инициализируем репозиторий
Создаем файл, работаем с ним

git status - понять что происходит с гитом
git log - отображает какие коммиты есть в истории
git log -1 -p - показать один коммит и какие изменения были сделаны
git show хэш_коммита/что то другое - многогранная команда


git add название_файла - добавить файл для слежения гитом
git rm --cached название_файла - отменить слежение за файловым

git add . - добавить все файлы одной командой


git commit название_файла - коммитим
git restore название_файла - откатиться до последнего хэш_коммита
git diff название_файла - показывает изменения

Если сделал изменение и хочешь отменить, а файл висит в modified то использовать команду
    git checkout -- название_файла

git mv - переименовать файл
git rm --cached - удалить файл в репе, но оставить на компе
git remote add origin ссылка_с_гитхаба - связать репозиторий с гитхаба со своим компом, а точнее с папкой 
git remote -v - посмотреть какие есть репы
или
git remote set-url origin ссылка_с_гитхаба - сменить репозиторий
git push origin master (или main) - отправить изменения на сервер origin в ветку master(main) с ветки на которой я сейчас нахожусь


git push -u origin master
После этого можно писать более коротко, так как git запомнил, что пушить надо на сервер origin ветку под именем master:
git push

git branch название_ветки - создать новую ветку
git checkout название_ветки - переключится на новую ветку
git branch -d название_ветки  - удалить ветку
git branch -D название_ветки  - удалить ветку по-любому
git branch - посмотреть название ветки
git checkout -b название_ветки - создает ветку и сразу перемещается на нее

git merge название_ветки - слить ветку название_ветки с основной. Но сначала надо перейти на основную ветку.

Вернуться назад на какой-то коммит:
git checkout хэш_коммита - переместиться на данный коммит
git checkout -b название_ветки хэш_коммита - или так сразу 
git checkout master - вернуться обратно на ветку мастер на последний коммит
git reset --hard хэш_коммита - откатиться до коммита, а все следующие изменения будут утеряны (если не запомнить хэш)
или
git reset --hard HEAD~2 - вернуться на 2 коммита назад и удалить все последующие коммиты

git reset --soft HEAD~2 - удалить 2 последних комита из лога и вернуться на комит 1 (если их было 3), но содержимое файла останется как в коммите 3. Как будто файл с содержимым коммита 3 является началом работы и самым первым коммитом

Git pull — связка команд git fetch и git merge

Изменить последний существующий коммит:
Вносим изменения и пишем
git commit --amend - можно поменять описание коммита

КАК РАБОТАТЬ В ОРГАНИЗАЦИИ:
1 тебе дают доступ к репозиторию компании (говоришь им свой логин на гитхабе например)
2 делаешь git clone репы себе на комп
3 создаешь свою ветку!!!! (нельзя работать в ветке master)
4 делаешь изменения, коммитишь
5 делаешь пуш на гитхаб, но так как там твоей ветки не существует, то используешь следующую команду для удаленного создания ветки и пуша:
    git push --set-upstreem origin название_своей_ветки
6 идешь на гитхаб и просишь сделать merge своей ветки с master с помощью кнопки COMPARE & PULL REQUEST. Оставляем описание и нажимаем CREATE PULL REQUEST
7 если все принято и смерджино, то удалить свою ветку локально
8 git push origin --delete название_своей_ветки - удалить ветку удаленно в репе

 git log --pretty=oneline - отобразить все хэши и коммиты одной строкой сразу

                    TAG

По делу ставятся только в ветке main
git tag - показать сущетвующие таги
git tag v1.0.0 - поставить таг на текущий коммит
git push origin v1.0.0 - запушить только таг
git tag -d v1.0.1 - удалить таг локально
git push origin --delete v1.0.1 - удалить таг в репе удаленно
git tag -a v1.0.1 хэш_коммита - добавить таг на более ранний комит, а не на текущий
git push origin --tags - запушить все таги в удаленный репозиторий

        Удалить случайно запушенный коммит

git reset --hard HEAD~1 - удаляем у себя
git push origin main --force - перезаписываем в удаленный репозиторий


Если переименовал ветку master на main в удаленном репозитории

The default branch has been renamed!

master is now named main

If you have a local clone, you can update it by running the following commands.

git branch -m master main
git fetch origin
git branch -u origin/main main
git remote set-head origin -a